\documentclass[11pt]{article}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage[spanish]{babel}
\usepackage{times}
\usepackage{anysize}
\usepackage{verbatim}
\usepackage{float}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PARA CODIGO %%%%%%%%%%%%%%
\usepackage{color}
\definecolor{gray97}{gray}{.97}
\definecolor{gray75}{gray}{.75}
\definecolor{gray45}{gray}{.45}

\usepackage{listings}
\lstset{ frame=Ltb,
framerule=0pt,
aboveskip=0.5cm,
framextopmargin=3pt,
framexbottommargin=3pt,
framexleftmargin=0.4cm,
framesep=0pt,
rulesep=.4pt,
backgroundcolor=\color{gray97},
rulesepcolor=\color{black},
%
stringstyle=\ttfamily,
showstringspaces = false,
basicstyle=\small\ttfamily,
commentstyle=\color{gray45},
keywordstyle=\bfseries,
%
numbers=left,
numbersep=15pt,
numberstyle=\tiny,
numberfirstline = false,
breaklines=true,
}

% minimizar fragmentado de listados
\lstnewenvironment{listing}[1][]
{\lstset{#1}\pagebreak[0]}{\pagebreak[0]}

\lstdefinestyle{consola}
{basicstyle=\scriptsize\bf\ttfamily,
backgroundcolor=\color{gray75},
}

\lstdefinestyle{C}
{language=C++,
}


%\begin{lstlisting}[style=C]
%%codigo
%\end{lstlisting} 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PARA CODIGO %%%%%%%%%%%%%%

%% Margenes
\marginsize{3cm}{2cm}{2cm}{2cm}

%Portada
\title{\textbf{\huge{Práctica 2: Algoritmos Divide y Vencerás}}}
\author{Alejandro Trujillo Caballero}
\date{7 de enero de 2015}

\usepackage{graphicx}
\begin{document}

\maketitle
\thispagestyle{empty}
\newpage

\tableofcontents
\newpage

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% INTRODUCCION
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Introducción}
En esta prática se pretende estudiar la eficiencia temporal de un algoritmo divide y vencerás frente 
a la solución exahustiva para el mismo problem  a. Para ello se solucionará el problema de encontrar los dos puntos más
cercanos en una nube de puntos.

La codificación exahustiva recorrerá cada pareja posible de puntos y calculara la distancia, almacenando la menor encontrada.

La codificación divide y vencerás dividirá la nube en cuatro cuadrantes a partir de un punto pibote y volverá a ejecutarse sobre cada cuadrante de manera recursiva hasta encontrar un caso base.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% ANALISIS TEORICO
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Análisis teórico}
%% EXAHUSTIVO %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Algoritmo exahustivo}

\begin{lstlisting}[style=C]
public double exhaustiva (Punto[] puntos) {
    double distancia;
    double distanciaMinima = Double.PositiveInfinity;
    for (int i = 0; i < puntos.Length; i++) {
        for (int j = i + 1; j < puntos.Length; j++) {
            distancia = puntos [i].distancia (puntos [j]);
            if (distanciaMinima > distancia) {
                distanciaMinima = distancia;
            }
        }
    }
    return distanciaMinima;
}
\end{lstlisting} 

Calculamos el tiempo de ejecución del algoritmo:


\[
T(n) = A - \sum_{i=1}^{n}{\sum_{j=i}^{n}{B}}
\]

Siendo A las operaciones que se realizan antes y despues de los bucles for (operaciones de orden constante), y B las que se realizan en el interior del segundo for (también constantes). Desarrollando la expresión:


\[
T(n) = A - B\sum_{i=1}^{n}{(n - i)} = A + B\left(\sum_{í=1}^{n}{n}-\sum_{í=1}^{n}{i}\right) = 
A + B\left(n^2-\frac{n(1-n)}{2}\right) = A + B\left(\frac{3n^2}{2} - \frac{n}{2}\right)
\]

En el caso mejor solo entraría en el if una vez y en el caso peor entraría siempre, por lo que para ambos casos A y B  son constantes y obtenemos que el algoritmo es de orden cuadrático:

\[
T(n) \in O(n^2)
\]

\newpage
%% DIVIDE Y VENCERAS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Algoritmo divide y vencerás}
\begin{lstlisting}[style=C]
public double DyV_cuatroCuadrantes (Punto[] puntos, double distanciaMin) {

    double distanciaMinima = distanciaMin;
    double distancia;
    Punto pivote;

    List<Punto>[] cuadrantes = new List<Punto>[4];
    for (int i = 0; i < 4; i++) {
        cuadrantes [i] = new List<Punto> ();
    }


    if (puntos.Length == 2) {
    	distanciaMinima = puntos [0].distancia (puntos [1]);
    } else {

        pivote = partition (puntos, ref cuadrantes);

        foreach (List<Punto> cuadrante in cuadrantes) {
            if (cuadrante.Count > 1) {
                distancia = DyV_cuatroCuadrantes (cuadrante.ToArray (), distanciaMinima);
                if (distanciaMinima > distancia)
                    distanciaMinima = distancia;
            }
        }

    //fronteraX 
        List<Punto> regionX = new List<Punto> ();

        foreach (List<Punto> cuadrante in cuadrantes) {
            foreach (Punto punto in cuadrante) {
                if (Math.Abs (punto.Y - pivote.Y) < distanciaMinima) {
                    regionX.Add (punto);
                }
            }
        }

        if (regionX.Count > 1 && regionX.Count < puntos.Length) {
            distancia = DyV_cuatroCuadrantes (regionX.ToArray (), distanciaMinima);
            if (distancia < distanciaMinima) {
                distanciaMinima = distancia;
            }
        }

    //fronteraY
        List<Punto> regionY = new List<Punto> ();

        foreach (List<Punto> cuadrante in cuadrantes) {
            foreach (Punto punto in cuadrante) {
                if (Math.Abs (punto.X - pivote.X) < distanciaMinima) {
                    regionY.Add (punto);
                }
            }
        }

        if (regionY.Count > 1 && regionY.Count < puntos.Length) {
            distancia = DyV_cuatroCuadrantes (regionY.ToArray (), distanciaMinima);
            if (distancia < distanciaMinima) {
                distanciaMinima = distancia;
            }
        }

    }
    return distanciaMinima;
}
\end{lstlisting} 

El coste temporal de este algoritmo viene dado por la expresión:

\[
T(n) = \left\{ \begin{array}{lcc}
             B &   si  & n \leq 2 \\
             \\ T_{partition} + 4T(n/4) + T_{fronteras} + A &  si & n > 2 
             \end{array}
   \right.
\]
Donde:

\begin{itemize}
\item A = Operaciones elementales generales (declaraciones, creación de variables...). Orden constante.
\item B = Coste del caso base, en nuestro caso el cálculo de la distancia entre dos puntos. Orden constante.
\item $4T(n/4)$ = Coste de las cuatro llamadas recursivas de tamaño $n/4$ (cuadrantes).
\item $T_{partition}$ = Coste de la llamada a partition.
\item $T_{fronteras}$ = Coste del cálculo de fronteras entre los cuadrantes.
\end{itemize}

La función partitión no está especificada en esta memoria ya que su funcionamiento consiste simplemente en tomar el primer punto como pivote y recorrer la nube, asignando cada punto al cuadrante correspondiente en base al pivote. Tenemos por tanto $T_{partition} = n$.

En caso de que el pivote elegido no divida los puntos, la función elige uno diferente hasta que si se produce división, sin embargo no vamos a considerarlo a la hora de realizar los cálculos teóricos ya que el orden de la función seguiría siendo lineal y solo serviría para dificultar el desarrollo matemático.


En el mejor caso, el algoritmo encontrará las distancia mínima al realizar las llamadas recursivas y esta será suficientemente
pequeña como para que no se realice ninguna llamada recursiva durante el cálculo de fronteras obteniendo $T_{fronteras} = 2n$ derivado de la identificación de las mismas. Tenemos que:

\[
T(n) = \left\{ \begin{array}{lcc}
             B &   si  & n \leq 2 \\
             \\ n + 4T(n/4) + 2n + A &  si & n > 2 
             \end{array}
   \right.
\]

Si aplicamos el teorema maestro\footnote{Presente en el tema 1 de teoría de la asignatura.} para el cálculo de órdenes de algoritmos divide y vencerás:

\[
a = 4, k = 1, b = 4 \Rightarrow T(n) \in O(n\log{n})
\]

En el caso peor, podríamos encontrar una nube de puntos distribuida de tal forma (por ejemplo cuatro puntos formando un cuadrado) que el algoritmo entre en un bucle sin salida ya que el algoritmo partition devolvería un punto en cada cuadrante, no se obtendría distancia mínima válida de la primera parte del algoritmo y el identificar las fronteras los cuatro puntos serían considerados frontera y volvería a realizarse exactamente la misma llamada al algoritmo, entrando en un bucle infinito.

Para evitar esto se ha introducido un caso base diferente en el algoritmo, consistente en que para nubes menores de 60 puntos se realiza en cálculo exahustivo de la distancia. ¿Por qué es esto una mejora? En primer lugar, para valores pequeños de n, el algoritmo exahustivo es aproximadamente igual de rápido que el divide y vencerás pero enormemente más ligero en memoria y en segundo lugar, la pila de llamadas recursivas es limitada y para nubes muy grandes este caso base con cálculo exahustivo reduce enormemente la carga en esa pila, permitiendo trabajar con nubes mucho mayores sin obtener desbordamientos.

Por otra parte, modificamos el caso peor que anteriormente nos llevaba a un bucle infinito para que ahora se ejecute también en tiempo logarítmico. 

Podemos hacer una aproximación del tiempo medio de ejecución del algoritmo suponiendo que en cada llamada se consideran fronteras un cuarto de los puntos, obteniendo:

\[
T(n) = \left\{ \begin{array}{lcc}
             n^2 &   si  & n \leq 60 \\
             \\ n + 4T(n/4) + 2n + 2T(n/4) + A =  3n + 6T(n/4) &  si & n > 2 
             \end{array}
   \right.
\]

Aunque $n^2$ no es una costante, podemos aplicar el teorema maestro ya que sabemos que en nuestro caso esta acotada superiormente por $60^2$ que sí lo es y obtenemos:

\[
a = 6, k = 1, b = 4 \Rightarrow a>b^k \Rightarrow T(n) \in O(n^{\log_{4}{6}}) = O(n^{1.2925})
\]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% RESULTADOS EXPERIMENTALES
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Resultados experimentales}
%% EXAHUSTIVO
\subsection{Algoritmo exahustivo}
\begin{figure}[H]
\centering
\includegraphics[scale=1.00]{bin/Debug/Exahustiva.pdf}
\caption{Ejecuciones del algoritmo exahustivo para diferentes tamaños de la nube}
\label{exahust}
\end{figure}

Podemos ver en la figura \ref{exahust} como las ejecuciones realizadas se ajustan perfectamente a la curva cuadrática teórica.
%% DIVIDE Y VENCERAS
\subsection{Algoritmo divide y vencerás}

\begin{figure}[H]
\centering
\includegraphics[scale=1.00]{bin/Debug/DivideyVencerasordenlog.pdf}
\caption{Ejecuciones del algoritmo divide y vencerás para diferentes tamaños de la nube}
\label{dyvlog}
\end{figure}

Podemos ver en la figura \ref{dyvlog} que la ejecución del algoritmo divide y vencerás se ajusta a una curva de orden $O(n\log{n})$.
\begin{figure}[H]
\centering
\includegraphics[scale=1.00]{bin/Debug/DivideyVenceraspotencia.pdf}
\caption{Ajuste de la ejecución divide y vencerás al caso medio aproximado}
\label{dyvaprox}
\end{figure}

Podemos ver también en la figura \ref{dyvaprox} que se ajusta de forma razonable a la curva aproximada calculada anteriormente en el análisis teórico.

\subsection{Comparación de algoritmos}

\begin{figure}[htp]
\centering
\includegraphics[scale=1.00]{bin/Debug/GrafComparacion.pdf}
\caption{Comparación de algoritmos exahustivo y divide y vencerás}
\label{comp}
\end{figure}


En la figura \ref{comp} se puede confirmar de forma evidente el objetivo de la práctica, al dibujar en la misma gráfica ambas ejecuciones se aprecia como el algoritmo divide y venceras es tremendamente más rápido que el exahustivo, y sobre todo, como aumenta la diferencia al aumentar el tamaño de los datos.

Para evidenciar aún más la diferencia se han buscado para que tamaños de la nube el algoritmo tarda entre 2 y 3 minutos:

\begin{itemize}
\item Para 110000 puntos, el agoritmo exahustivo tarda 2,3 minutos, el divide y vencerás 0,2 segundos.
\item 
\end{itemize}



\end{document}
